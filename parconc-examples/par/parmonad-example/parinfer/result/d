inferBind
    x "d"
    x "c"
    x "b"
    x "a"
    u App App App Var a Var b Var c Int 1
    fu ["a","b","c"]
    tfu [All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,All a1 a2. (a1 -> a2) -> a1 -> a2,All a0. a0 -> a0]
    inferTopRhs
        inferTerm App {{{
            t::Term App App Var a Var b Var c
            aa::Env [a : All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,
                     b : All a1 a2. (a1 -> a2) -> a1 -> a2,
                     c : All a0. a0 -> a0]
                inferTerm App {{{
                    t::Term App Var a Var b
                    aa::Env [a : All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,
                             b : All a1 a2. (a1 -> a2) -> a1 -> a2,
                             c : All a0. a0 -> a0]
                    inferTerm App {{{
                        inferTerm Var {{{
                            t::Term Var a
                            aa::Env [a : All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,
                                     b : All a1 a2. (a1 -> a2) -> a1 -> a2,
                                     c : All a0. a0 -> a0]
                                domEnv aa::[VarId] ["a","b","c"]
                                x::VarId "a"
                                specialiseI ss::PolyType All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4
                                    tt::MonoType (a1 -> a2 -> a4) -> a1 -> a2 -> a4
                                        zipp x ["a1","a2","a4"]
                                        zipp y [a0,a1,a2]
                                    applySubs::MonoType (a0 -> a1 -> a2) -> a0 -> a1 -> a2
                                substituteI tt::MonoType (a0 -> a1 -> a2) -> a0 -> a1 -> a2
                                    substituteI s = []
                                    substituteI t = (a0 -> a1 -> a2) -> a0 -> a1 -> a2
                                    substituteI applySub s t = (a0 -> a1 -> a2) -> a0 -> a1 -> a2
                                returnI uu::MonoType (a0 -> a1 -> a2) -> a0 -> a1 -> a2
                        }}}
                        inferTerm Var {{{
                            t::Term Var b
                            aa::Env [a : All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,
                                     b : All a1 a2. (a1 -> a2) -> a1 -> a2,
                                     c : All a0. a0 -> a0]
                                domEnv aa::[VarId] ["a","b","c"]
                                x::VarId "b"
                                specialiseI ss::PolyType All a1 a2. (a1 -> a2) -> a1 -> a2
                                    tt::MonoType (a1 -> a2) -> a1 -> a2
                                        zipp x ["a1","a2"]
                                        zipp y [a3,a4]
                                    applySubs::MonoType (a3 -> a4) -> a3 -> a4
                                substituteI tt::MonoType (a3 -> a4) -> a3 -> a4
                                    substituteI s = []
                                    substituteI t = (a3 -> a4) -> a3 -> a4
                                    substituteI applySub s t = (a3 -> a4) -> a3 -> a4
                                returnI uu::MonoType (a3 -> a4) -> a3 -> a4
                        }}}
                        unifyI
                            tt::MonoType (a0 -> a1 -> a2) -> a0 -> a1 -> a2
                            uu::MonoType (a3 -> a4) -> a3 -> a4
                            ->
                            xx::MonoType a5
                                unifyI t = (a0 -> a1 -> a2) -> a0 -> a1 -> a2
                                unifyI u = ((a3 -> a4) -> a3 -> a4) -> a5
                                unifyI s = []
                                    unify unifies ts = [a0 -> a1 -> a2,a0 -> a1 -> a2] us = [(a3 -> a4) -> a3 -> a4,a5] s = []
                                        unify unifies ts = [a0,a1 -> a2] us = [a3 -> a4,a3 -> a4] s = []
                                            unifyTVar1 x = "a0" u = a3 -> a4 s = []
                                            extendSub s = [] x = "a0" t = a3 -> a4  => ["a0" : a3 -> a4]
                                            unifies ts = [a1 -> a2] us = [a3 -> a4] s' = ["a0" : a3 -> a4]
                                                unify unifies ts = [a1,a2] us = [a3,a4] s = ["a0" : a3 -> a4]
                                                    unifyTVar1 x = "a1" u = a3 s = ["a0" : a3 -> a4]
                                                    extendSub s = ["a0" : a3 -> a4] x = "a1" t = a3  => ["a1" : a3, "a0" : a3 -> a4]
                                                unifies ts = [a2] us = [a4] s' = ["a1" : a3, "a0" : a3 -> a4]
                                                    unifyTVar1 x = "a2" u = a4 s = ["a1" : a3, "a0" : a3 -> a4]
                                                    extendSub s = ["a1" : a3, "a0" : a3 -> a4] x = "a2" t = a4  => ["a2" : a4, "a1" : a3, "a0" : a3 -> a4]
                                                unifies ts = [] us = [] s' = ["a2" : a4, "a1" : a3, "a0" : a3 -> a4]
                                                unifies returnM = ["a2" : a4, "a1" : a3, "a0" : a3 -> a4]
                                            unifies ts = [] us = [] s' = ["a2" : a4, "a1" : a3, "a0" : a3 -> a4]
                                            unifies returnM = ["a2" : a4, "a1" : a3, "a0" : a3 -> a4]
                                        unifies ts = [a0 -> a1 -> a2] us = [a5] s' = ["a2" : a4, "a1" : a3, "a0" : a3 -> a4]
                                            unifyTVar2 y = "a5" t = a0 -> a1 -> a2 s = ["a2" : a4, "a1" : a3, "a0" : a3 -> a4]
                                            extendSub s = ["a2" : a4, "a1" : a3, "a0" : a3 -> a4] x = "a5" t = a0 -> a1 -> a2  => ["a5" : (a3 -> a4) -> a3 -> a4, "a2" : a4, "a1" : a3, "a0" : a3 -> a4]
                                        unifies ts = [] us = [] s' = ["a5" : (a3 -> a4) -> a3 -> a4, "a2" : a4, "a1" : a3, "a0" : a3 -> a4]
                                        unifies returnM = ["a5" : (a3 -> a4) -> a3 -> a4, "a2" : a4, "a1" : a3, "a0" : a3 -> a4]
                                unifyI sM = Just ["a5" : (a3 -> a4) -> a3 -> a4,
                                 "a2" : a4,
                                 "a1" : a3,
                                 "a0" : a3 -> a4]
                        substituteI xx::MonoType a5
                            substituteI s = ["a5" : (a3 -> a4) -> a3 -> a4,
                             "a2" : a4,
                             "a1" : a3,
                             "a0" : a3 -> a4]
                            substituteI t = a5
                            substituteI applySub s t = (a3 -> a4) -> a3 -> a4
                        returnI vv::MonoType (a3 -> a4) -> a3 -> a4
                    App Var a Var b = 
                     (((a3 -> a4) -> a3 -> a4,
                       ["a5" : (a3 -> a4) -> a3 -> a4, 
                        "a2" : a4,
                        "a1" : a3,
                        "a0" : a3 -> a4]),
                       6)
                    }}}
                    inferTerm Var {{{
                        t::Term Var c
                        aa::Env [a : All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,
                                 b : All a1 a2. (a1 -> a2) -> a1 -> a2,
                                 c : All a0. a0 -> a0]
                            domEnv aa::[VarId] ["a","b","c"]
                            x::VarId "c"
                            specialiseI ss::PolyType All a0. a0 -> a0
                                tt::MonoType a0 -> a0
                                    zipp x ["a0"]
                                    zipp y [a6]
                                applySubs::MonoType a6 -> a6
                            substituteI tt::MonoType a6 -> a6
                            returnI uu::MonoType a6 -> a6
                    }}}
                    unifyI
                        tt::MonoType (a3 -> a4) -> a3 -> a4
                        uu::MonoType a6 -> a6
                        xx::MonoType a7
                    substituteI xx::MonoType a7
                    returnI vv::MonoType a6 -> a6
                App App Var a Var b Var c = 
                 ((a6 -> a6,
                   ["a7" : a6 -> a6, 
                    "a4" : a6, 
                    "a3" : a6, 
                    "a5" : (a6 -> a6) -> a6 -> a6, 
                    "a2" : a6, 
                    "a1" : a6, 
                    "a0" : a6 -> a6]),
                   8)
                }}}
                inferTerm t::Term Int 1
            unifyI
                tt::MonoType a6 -> a6
                uu::MonoType Int
                xx::MonoType a8
            substituteI xx::MonoType a8
            returnI vv::MonoType Int
        App App App Var a Var b Var c Int 1 = 
         ((Int,
           ["a8" : Int, 
            "a6" : Int, 
            "a7" : Int -> Int, 
            "a4" : Int, 
            "a3" : Int, 
            "a5" : (Int -> Int) -> Int -> Int, 
            "a2" : Int, 
            "a1" : Int, 
            "a0" : Int -> Int]),
           9)
        }}}
    aa [a : All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,
     b : All a1 a2. (a1 -> a2) -> a1 -> a2,
     c : All a0. a0 -> a0]
    uu Int
    result generaliseI::PolyType All . Int

[("*",All . Int -> Int -> Int),("+",All . Int -> Int -> Int),("-",All . Int -> Int -> Int),("/",All . Int -> Int -> Int),("a",All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4),("b",All a1 a2. (a1 -> a2) -> a1 -> a2),("c",All a0. a0 -> a0),("d",All . Int)]
