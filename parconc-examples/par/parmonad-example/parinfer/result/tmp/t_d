
x "d"
x "c"
x "b"
x "a"
u App App App Var a Var b Var c Int 1

inferTerm App inferTerm t::Term App App Var a Var b Var c
inferTerm App inferTerm t::Term App Var a Var b
inferTerm App inferTerm t::Term Var a
fu ["a","b","c"]
tfu [All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,All a1 a2. (a1 -> a2) -> a1 -> a2,All a0. a0 -> a0]
inferTerm App inferTerm aa::Env [a : All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,
 b : All a1 a2. (a1 -> a2) -> a1 -> a2,
 c : All a0. a0 -> a0]
inferTerm App inferTerm aa::Env [a : All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,
 b : All a1 a2. (a1 -> a2) -> a1 -> a2,
 c : All a0. a0 -> a0]
inferTerm App inferTerm aa::Env [a : All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,
 b : All a1 a2. (a1 -> a2) -> a1 -> a2,
 c : All a0. a0 -> a0]
inferTerm Var domEnv aa::[VarId] ["a","b","c"]
inferTerm Var x::VarId "a"
inferTerm Var specialiseI ss::PolyType All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4
inferTerm App inferTerm t::Term Var b
inferTerm App inferTerm aa::Env [a : All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,
 b : All a1 a2. (a1 -> a2) -> a1 -> a2,
 c : All a0. a0 -> a0]
inferTerm Var domEnv aa::[VarId] ["a","b","c"]
inferTerm Var x::VarId "b"
inferTerm Var specialiseI ss::PolyType All a1 a2. (a1 -> a2) -> a1 -> a2
specialiseI tt::MonoType (a1 -> a2 -> a4) -> a1 -> a2 -> a4
zipp x ["a1","a2","a4"]
zipp y [a0,a1,a2]
specialiseI applySubs::MonoType (a0 -> a1 -> a2) -> a0 -> a1 -> a2
zipp x ["a1","a2","a4"]
zipp y [a0,a1,a2]
inferTerm Var substituteI tt::MonoType (a0 -> a1 -> a2) -> a0 -> a1 -> a2
substituteI applySub s t = (a0 -> a1 -> a2) -> a0 -> a1 -> a2
substituteI s = []
inferTerm Var returnI uu::MonoType (a0 -> a1 -> a2) -> a0 -> a1 -> a2
inferTerm App unifyI tt::MonoType (a0 -> a1 -> a2) -> a0 -> a1 -> a2
specialiseI tt::MonoType (a1 -> a2) -> a1 -> a2
zipp x ["a1","a2"]
zipp y [a3,a4]
specialiseI applySubs::MonoType (a3 -> a4) -> a3 -> a4
zipp x ["a1","a2"]
zipp y [a3,a4]
inferTerm Var substituteI tt::MonoType (a3 -> a4) -> a3 -> a4
substituteI applySub s t = (a3 -> a4) -> a3 -> a4
substituteI s = []
inferTerm Var returnI uu::MonoType (a3 -> a4) -> a3 -> a4
inferTerm App unifyI uu::MonoType (a3 -> a4) -> a3 -> a4
unifyI s = []
inferTerm App unifyI xx::MonoType a5
inferTerm App inferTerm t::Term Var c
inferTerm App inferTerm aa::Env [a : All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,
 b : All a1 a2. (a1 -> a2) -> a1 -> a2,
 c : All a0. a0 -> a0]
inferTerm Var domEnv aa::[VarId] ["a","b","c"]
inferTerm Var x::VarId "c"
inferTerm Var specialiseI ss::PolyType All a0. a0 -> a0
inferTerm App substituteI xx::MonoType a5
unifyI sM = Just ["a5" : (a3 -> a4) -> a3 -> a4,
 "a2" : a4,
 "a1" : a3,
 "a0" : a3 -> a4]
substituteI applySub s t = (a3 -> a4) -> a3 -> a4
substituteI s = ["a5" : (a3 -> a4) -> a3 -> a4,
 "a2" : a4,
 "a1" : a3,
 "a0" : a3 -> a4]
inferTerm App returnI vv::MonoType (a3 -> a4) -> a3 -> a4
inferTerm App unifyI tt::MonoType (a3 -> a4) -> a3 -> a4
specialiseI tt::MonoType a0 -> a0
zipp x ["a0"]
zipp y [a6]
specialiseI applySubs::MonoType a6 -> a6
zipp x ["a0"]
zipp y [a6]
inferTerm Var substituteI tt::MonoType a6 -> a6
substituteI applySub s t = a6 -> a6
substituteI s = ["a5" : (a3 -> a4) -> a3 -> a4,
 "a2" : a4,
 "a1" : a3,
 "a0" : a3 -> a4]
inferTerm Var returnI uu::MonoType a6 -> a6
inferTerm App unifyI uu::MonoType a6 -> a6
unifyI s = ["a5" : (a3 -> a4) -> a3 -> a4,
 "a2" : a4,
 "a1" : a3,
 "a0" : a3 -> a4]
inferTerm App unifyI xx::MonoType a7
inferTerm App inferTerm t::Term Int 1
inferTerm App substituteI xx::MonoType a7
unifyI sM = Just ["a7" : a6 -> a6,
 "a4" : a6,
 "a3" : a6,
 "a5" : (a6 -> a6) -> a6 -> a6,
 "a2" : a6,
 "a1" : a6,
 "a0" : a6 -> a6]
substituteI applySub s t = a6 -> a6
substituteI s = ["a7" : a6 -> a6,
 "a4" : a6,
 "a3" : a6,
 "a5" : (a6 -> a6) -> a6 -> a6,
 "a2" : a6,
 "a1" : a6,
 "a0" : a6 -> a6]
inferTerm App returnI vv::MonoType a6 -> a6
inferTerm App unifyI tt::MonoType a6 -> a6
unifyI s = ["a7" : a6 -> a6,
 "a4" : a6,
 "a3" : a6,
 "a5" : (a6 -> a6) -> a6 -> a6,
 "a2" : a6,
 "a1" : a6,
 "a0" : a6 -> a6]
inferTerm App unifyI uu::MonoType Int
inferTerm App unifyI xx::MonoType a8
aa [a : All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4,
 b : All a1 a2. (a1 -> a2) -> a1 -> a2,
 c : All a0. a0 -> a0]
inferTerm App substituteI xx::MonoType a8
unifyI sM = Just ["a8" : Int,
 "a6" : Int,
 "a7" : Int -> Int,
 "a4" : Int,
 "a3" : Int,
 "a5" : (Int -> Int) -> Int -> Int,
 "a2" : Int,
 "a1" : Int,
 "a0" : Int -> Int]
substituteI applySub s t = Int
substituteI s = ["a8" : Int,
 "a6" : Int,
 "a7" : Int -> Int,
 "a4" : Int,
 "a3" : Int,
 "a5" : (Int -> Int) -> Int -> Int,
 "a2" : Int,
 "a1" : Int,
 "a0" : Int -> Int]
inferTerm App returnI vv::MonoType Int
uu Int
result generaliseI::PolyType All . Int
[("*",All . Int -> Int -> Int),("+",All . Int -> Int -> Int),("-",All . Int -> Int -> Int),("/",All . Int -> Int -> Int),("a",All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4),("b",All a1 a2. (a1 -> a2) -> a1 -> a2),("c",All a0. a0 -> a0),("d",All . Int)]
