u Abs \x. Var x
inferTerm Abs v::Term Var x
inferTerm Abs extendLocal x::VarId "x"
fu []
inferTerm Abs extendLocal aa::Env []
inferTerm Var domEnv aa::[VarId] ["x"]
inferTerm Var x::VarId "x"
inferTerm Abs extendLocal xx::MonoType a0
inferTerm Var specialiseI ss::PolyType All . a0
aa []
inferTerm Abs substituteI xx::MonoType a0
substituteI applySub s t = a0
substituteI s = []
inferTerm Abs returnI uu::MonoType a0
specialiseI tt::MonoType a0
zipp x []
specialiseI applySubs::MonoType a0
zipp x []
inferTerm Var substituteI tt::MonoType a0
substituteI applySub s t = a0
substituteI s = []
inferTerm Var returnI uu::MonoType a0
inferTerm Abs returnI vv::MonoType a0
uu a0 -> a0
result generaliseI::PolyType All a0. a0 -> a0
