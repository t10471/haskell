ghciの起動方法
:VimShellInteractive ghci -no-user-package-db -package-db /root/workspace/parconc-examples/par/parmonad-example/.cabal-sandbox/x86_64-linux-ghc-7.8.3-packages.conf.d

fwsparse {{{
重み付き有向グラフの最短経路を求めるプログラム
ghc --make -O2 -optP-include -optP../dist/build/autogen/cabal_macros.h -package-db /root/workspace/parconc-examples/par/parmonad-example/.cabal-sandbox/x86_64-linux-ghc-7.8.3-packages.conf.d ./fwsparse.hs
./fwsparse 1000 800 +RTS -s
並列版
ghc --make -O2 -optP-include -optP../dist/build/autogen/cabal_macros.h -package-db /root/workspace/parconc-examples/par/parmonad-example/.cabal-sandbox/x86_64-linux-ghc-7.8.3-packages.conf.d -threaded -rtsopts ./fwsparse1.hs
./fwsparse1 1000 800 +RTS -s
./fwsparse1 1000 800 +RTS -N4 -s

}}}

rsa {{{
Streamを使ったパイプライ並列
ghc --make -O2 -optP-include -optPdist/build/autogen/cabal_macros.h -package-db /root/workspace/parconc-examples/par/parmonad-example/.cabal-sandbox/x86_64-linux-ghc-7.8.3-packages.conf.d ./rsa-pipeline.hs
echo "Hello World!" | ./rsa-pipeline -

}}}

timetable {{{
見たいものがかぶらないような時間割を作成する
発表枠 X トラック

ghc --make -O2 -optP-include -optPdist/build/autogen/cabal_macros.h -package-db /root/workspace/parconc-examples/par/parmonad-example/.cabal-sandbox/x86_64-linux-ghc-7.8.3-packages.conf.d -rtsopts ./timetable.hs
./timetable 4 3 11 10 3 +RTS -s

timetable1の流れ
maxTrack 2
maxSlot  2
allTalks [1,2,3,4]
clashes  [[1,2], [2,3], [3,4], [1,4]]
処理の流れ
(0, 0, [], [], [1,2,3,4], [1,2,3,4])
    4つに分岐(refine partialが4つを返す)し、それをmap generateで再帰する Justで止まる
    (0,1,[],[1],[3],[2,3,4])      -> [(0,2,[],[3,1],[],[2,4])]   -> [(1,0,[[3,1]],[],[2,4],[2,4])]
        2つに分岐
        (1,1,[[3,1]],[2],[4],[4]) -> [(1,2,[[3,1]],[4,2],[],[])] -> [(2,0,[[4,2],[3,1]],[],[],[])]
            Just soln [[4,2],[3,1]]
        (1,1,[[3,1]],[4],[2],[2]) -> [(1,2,[[3,1]],[2,4],[],[])] -> [(2,0,[[2,4],[3,1]],[],[],[])]
            Just soln [[2,4],[3,1]]
    (0,1,[],[2],[4],[1,3,4])      -> [(0,2,[],[4,2],[],[1,3])]   -> [(1,0,[[4,2]],[],[1,3],[1,3])]
        2つに分岐
        (1,1,[[4,2]],[1],[3],[3]) -> [(1,2,[[4,2]],[3,1],[],[])] -> [(2,0,[[3,1],[4,2]],[],[],[])]
            Just soln [[3,1],[4,2]]
        (1,1,[[4,2]],[3],[1],[1]) -> [(1,2,[[4,2]],[1,3],[],[])] -> [(2,0,[[1,3],[4,2]],[],[],[])]
            Just soln [[1,3],[4,2]]
    (0,1,[],[3],[1],[1,2,4])      -> [(0,2,[],[1,3],[],[2,4])]   -> [(1,0,[[1,3]],[],[2,4],[2,4])]
        2つに分岐
        (1,1,[[1,3]],[2],[4],[4]) -> [(1,2,[1,3]],[4,2],[],[])]  -> [(2,0,[[4,2],[1,3]],[],[],[])]
            Just soln [[4,2],[1,3]]
        (1,1,[[1,3]],[4],[2],[2]) -> [(1,2,[[1,3]],[2,4],[],[])] -> [(2,0,[[2,4],[1,3]],[],[],[])]
            Just soln [[2,4],[1,3]]
    (0,1,[],[4],[2],[1,2,3])      -> [(0,2,[],[2,4],[],[1,3])]   -> [(1,0,[[2,4]],[],[1,3],[1,3])]
        2つに分岐
        (1,1,[[2,4]],[1],[3],[3]) -> [(1,2,[[2,4]],[3,1],[],[])] -> [(2,0,[[3,1],[2,4]],[],[],[])]
            Just soln [[3,1],[2,4]]
        (1,1,[[2,4]],[3],[1],[1]) -> [(1,2,[[2,4]],[1,3],[],[])] -> [(2,0,[[1,3],[2,4]],[],[],[])]
            Just soln [[1,3],[2,4]]
ghc --make -O2 -optP-include -optPdist/build/autogen/cabal_macros.h -package-db /root/workspace/parconc-examples/par/parmonad-example/.cabal-sandbox/x86_64-linux-ghc-7.8.3-packages.conf.d -rtsopts ./timetable1.hs
./timetable1 4 3 11 10 3 +RTS -s
ghc --make -O2 -optP-include -optPdist/build/autogen/cabal_macros.h -package-db /root/workspace/parconc-examples/par/parmonad-example/.cabal-sandbox/x86_64-linux-ghc-7.8.3-packages.conf.d -threaded -rtsopts ./timetable2.hs
./timetable2 4 3 11 10 3 +RTS -N2 -s
ghc --make -O2 -optP-include -optPdist/build/autogen/cabal_macros.h -package-db /root/workspace/parconc-examples/par/parmonad-example/.cabal-sandbox/x86_64-linux-ghc-7.8.3-packages.conf.d -threaded -rtsopts ./timetable3.hs
./timetable3 4 3 11 10 3 +RTS -N2 -s
}}}

parinfer {{{
cd parinfer 
ghc --make -O2 -optP-include -optP../dist/build/autogen/cabal_macros.h -package-db /root/workspace/parconc-examples/par/parmonad-example/.cabal-sandbox/x86_64-linux-ghc-7.8.3-packages.conf.d -rtsopts ./parinfer.hs

echo "a = 1; b = 2; c = a + b;" | ./parinfer

types
    [("+",All . Int -> Int -> Int),("*",All . Int -> Int -> Int),("-",All . Int -> Int -> Int),("/",All . Int -> Int -> Int)]
initialEnv
    [* : All . Int -> Int -> Int,
     + : All . Int -> Int -> Int,
     - : All . Int -> Int -> Int,
     / : All . Int -> Int -> Int]
parseBinds (alexScanTokens l)
happyの解析結果
    [("a",1),("b",2),("c",+ a b)]

freeVarsをlistにした結果
fu
    ["+","a","b"]
topenvからfuがキーのものを取得
tfu
    [All . Int -> Int -> Int,All . Int,All . Int]
makeEnv (zip fu tfu) 
    [+ : All . Int -> Int -> Int,
     a : All . Int,
     b : All . Int]

Inferの中身の確認方法
型   MkI (StateX Sub (StateX Counter (Maybe ((x, Sub), Counter))))
処理 
useM (("faild", emptySub), 0) (ddd (ddd (rep a) emptySub) 1)
useM ((TVar "faild", emptySub), 0) (ddd (ddd (rep freshI) emptySub) 1)
useM (([TVar "faild"], emptySub), 0) (ddd (ddd (rep (freshesI 3)) emptySub) 1)
useM ((999, emptySub), 0) (ddd (ddd (rep getCounterI) emptySub) 1)

let p = (\x -> useM ((TVar "faild", emptySub), 0) (ddd (ddd (rep x) emptySub) 0))
let m = (freshI >>= (\x -> freshI >>= (\y -> returnI y)))

getCounterI `thenI` (\c -> putCounterI (c+1) `thenI` (\() -> returnI (TVar ("a" ++ show c))))
結果
[("*",All . Int -> Int -> Int),("+",All . Int -> Int -> Int),("-",All . Int -> Int -> Int),("/",All . Int -> Int -> Int),("a",All . Int),("b",All . Int),("c",All . Int)]
}}}
