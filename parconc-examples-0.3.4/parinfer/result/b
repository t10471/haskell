        u Abs \x y. App Var x Var y
        fu []
        inferTopRhs {{{
            inferTerm Abs {{{
                extendLocal
                    x::VarId "x"
                    aa::Env []
                    xx::MonoType a0
                v::Term Abs \y. App Var x Var y
                    inferTerm Abs {{{
                        extendLocal
                            x::VarId "y"
                            aa::Env [x : All . a0]
                            xx::MonoType a1
                        v::Term App Var x Var y
                            inferTerm App
                                inferTerm Var
                                    aa::Env [x : All . a0,y : All . a1]
                                    t::Term Var x
                                        domEnv aa::[VarId] ["x","y"]
                                        x::VarId "x"
                                        specialiseI ss::PolyType All . a0
                                                zipp x []
                                            applySubs::MonoType a0
                                        substituteI tt::MonoType a0
                                            substituteI applySub s t = a0
                                            substituteI s = []
                                        returnI uu::MonoType a0
                                inferTerm Var
                                    aa::Env [x : All . a0,y : All . a1]
                                    t::Term Var y
                                        domEnv aa::[VarId] ["x","y"]
                                        x::VarId "y"
                                        specialiseI ss::PolyType All . a1
                                                zipp x []
                                            applySubs::MonoType a1
                                        substituteI tt::MonoType a1
                                            substituteI applySub s t = a1
                                            substituteI s = []
                                        returnI uu::MonoType a1
                            unifyI
                                tt::MonoType a0
                                uu::MonoType a1
                                ->
                                xx::MonoType a2
                                    unifyI s = []
                                    unifyI sM = Just ["a0" : a1 -> a2]
                            substituteI xx::MonoType a2
                                substituteI applySub s t = a2
                                substituteI s = ["a0" : a1 -> a2]
                            returnI vv::MonoType a2
                        substituteI xx::MonoType a1
                            substituteI applySub s t = a1
                            substituteI s = ["a0" : a1 -> a2]
                        returnI
                            uu::MonoType a1
                            ->
                            vv::MonoType a2
                    }}}
                substituteI xx::MonoType a0
                    substituteI applySub s t = a1 -> a2
                    substituteI s = ["a0" : a1 -> a2]
                returnI
                    uu::MonoType a1 -> a2
                    ->
                    vv::MonoType a1 -> a2
            }}}  
            generaliseI
                aa []
                uu (a1 -> a2) -> a1 -> a2
                returnI All xxs tt::PolyType All a1 a2. (a1 -> a2) -> a1 -> a2
        }}}
