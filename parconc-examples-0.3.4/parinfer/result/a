        u Abs \x y z. App App Var x Var y Var z
        fu []
        inferTopRhs {{{
            inferTerm Abs {{{
                extendLocal
                    x::VarId "x"
                    aa::Env []
                    xx::MonoType a0
                v::Term Abs \y z. App App Var x Var y Var z 
                    inferTerm Abs {{{
                        extendLocal
                            x::VarId "y"
                            aa::Env [x : All . a0]
                            xx::MonoType a1
                        v::Term Abs \z. App App Var x Var y Var z 
                            inferTerm Abs {{{
                                extendLocal
                                    x::VarId "z"
                                    aa::Env [x : All . a0,y : All . a1]
                                    xx::MonoType a2
                                v::Term App App Var x Var y Var z 
                                    inferTerm App {{{
                                        t::Term App Var x Var y
                                        aa::Env [x : All . a0,y : All . a1,z : All . a2]
                                        inferTerm App
                                            inferTerm Var {{{
                                                t::Term Var x
                                                aa::Env [x : All . a0,y : All . a1,z : All . a2]
                                                        domEnv aa::[VarId] ["x","y","z"]
                                                        x::VarId "x"
                                                        specialiseI ss::PolyType All . a0
                                                                zipp x []
                                                            applySubs::MonoType a0
                                                        substituteI tt::MonoType a0
                                                            substituteI applySub s t = a0
                                                            substituteI s = []
                                                        returnI uu::MonoType a0
                                            }}}
                                            inferTerm Var {{{
                                                t::Term Var y
                                                aa::Env [x : All . a0,y : All . a1,z : All . a2]
                                                            domEnv aa::[VarId] ["x","y","z"]
                                                            x::VarId "y"
                                                            specialiseI ss::PolyType All . a1
                                                                    zipp x []
                                                                applySubs::MonoType a1
                                                            substituteI tt::MonoType a1
                                                                substituteI applySub s t = a1
                                                                substituteI s = []
                                                            returnI uu::MonoType a1
                                            }}}
                                        unifyI
                                            tt::MonoType a0
                                            uu::MonoType a1
                                            ->
                                            xx::MonoType a3
                                                unifyI s = []
                                                unifyI sM = Just ["a0" : a1 -> a3]
                                        substituteI xx::MonoType a3
                                            substituteI applySub s t = a3
                                            substituteI s = ["a0" : a1 -> a3]
                                        returnI vv::MonoType a3
                                        App Var x Var y = ((a3,[\"a0\" : a1 -> a3]),4)
                                    inferTerm App
                                        t::Term Var z
                                        aa::Env [x : All . a0,y : All . a1,z : All . a2]
                                            inferTerm Var {{{
                                                domEnv aa::[VarId] ["x","y","z"]
                                                x::VarId "z"
                                                specialiseI ss::PolyType All . a2
                                                        zipp x []
                                                    applySubs::MonoType a2
                                                substituteI tt::MonoType a2
                                                    substituteI applySub s t = a2
                                                    substituteI s = ["a0" : a1 -> a3]
                                                returnI uu::MonoType a2
                                            }}}
                                    unifyI
                                        tt::MonoType a3
                                        uu::MonoType a2
                                        ->
                                        xx::MonoType a4
                                            unifyI s = ["a0" : a1 -> a3]
                                            unifyI sM = Just ["a3" : a2 -> a4, "a0" : a1 -> a2 -> a4]
                                    substituteI xx::MonoType a4
                                        substituteI applySub s t = a4
                                        substituteI s = ["a3" : a2 -> a4, "a0" : a1 -> a2 -> a4]
                                    returnI vv::MonoType a4
                                    App App Var x Var y Var z = ((a4,[\"a3\" : a2 -> a4,\n \"a0\" : a1 -> a2 -> a4]),5)
                                    }}}
                                substituteI xx::MonoType a0
                                    substituteI applySub s t = a2
                                    substituteI s = ["a3" : a2 -> a4, "a0" : a1 -> a2 -> a4]
                                returnI
                                    uu::MonoType a2   substituteIの結果
                                    ->
                                    vv::MonoType a4    App App Var x Var y Var zの結果
                            Abs \\z. App App Var x Var y Var z = ((a2 -> a4,[\"a3\" : a2 -> a4,\n \"a0\" : a1 -> a2 -> a4]),5)
                            }}}
                        substituteI xx::MonoType a1
                            substituteI applySub s t = a1
                            substituteI s = ["a3" : a2 -> a4, "a0" : a1 -> a2 -> a4]
                        returnI
                            uu::MonoType a1
                            ->
                            vv::MonoType a2 -> a4
                    Abs \\y z. App App Var x Var y Var z = ((a1 -> a2 -> a4,[\"a3\" : a2 -> a4,\n \"a0\" : a1 -> a2 -> a4]),5)
                    }}}
                substituteI xx::MonoType a2
                    substituteI applySub s t = a1 -> a2 -> a4
                    substituteI s = ["a3" : a2 -> a4, "a0" : a1 -> a2 -> a4]
                returnI
                    uu::MonoType a1 -> a2 -> a4
                    ->
                    vv::MonoType a1 -> a2 -> a4
            Abs \\x y z. App App Var x Var y Var z = (((a1 -> a2 -> a4) -> a1 -> a2 -> a4,[\"a3\" : a2 -> a4,\n \"a0\" : a1 -> a2 -> a4]),5)
            }}}
            generaliseI
                aa []
                uu (a1 -> a2 -> a4) -> a1 -> a2 -> a4
                returnI All xxs tt::PolyType All a1 a2 a4. (a1 -> a2 -> a4) -> a1 -> a2 -> a4
        }}}
